
1. What is servlets? Servlet is a way to generate HTML when Web server
receives HTTP request. It works exactly the same as CGI script written
in C or Perl, only servlet is written in Java. It gets its data which
it processes from request parameters.

Servlet is a Java class which implements javax.servlet.Servlet
interface. In most cases it actually extends the
javax.servlet.http.HttpServlet class.

Software program which plays servlets inside Web server is called
Servlet Engine.

See more information:

http://developer.java.sun.com/developer/onlineTraining/Servlets/Fundamentals/
http://java.sun.com/products/servlet/2.2/javadoc/overview-summary.html

2. What is JSP? JSP (Java Server Pages) is an HTML-like syntax which
allows to mix HTML and Java code. One way to create a JSP page is to
place all Java code inside special tags: <% %>. Another, more advanced
way is to create Custom Tags which invokes corresponding Java code,
written in a separate normal Java file.

A program, called JSP Processor processes JSP page and generate a
servlet class. After that this servlet is played by Servlet Engine.

More information about JSP can be found at:

http://java.sun.com/products/jsp/download.html#specs

Custom tag is like a normal HTML tag. It can have a body and a set of
attributes. Depending on attribute values it can produce different
HTML. Each tag corresponds to a separate Java class that implements
javax.servlet.jsp.tagext.Tag interface. In most cases such class will
be derived from javax.servlet.jsp.tagext.TagSupport or
javax.servlet.jsp.tagext.BodyTagSupport class. Attributes and other
tag data is defined in Tag Library Definition File, which usual has
extension tld.

More information about custom tags can be found at:

http://java.sun.com/webservices/docs/1.0/tutorial/doc/JSPTags.html

3. Cache Tag Library. Cache Tag Library contains a set of custom tags
which allows:

  - View content of Cache Object.

  - Edit Property values of Cache Object.

  - Generate HTML SELECT elements (drop-down or multiple selection
    lists), values of which correspond to possible values of properties
    in Cache Objects for use in HTML forms.

  - Process request generated by SELECT elements and generate
    corresponding SQL query.

  - Navigate in History of searches.

4. Tag <cache:list> is implemented by class
com.intersys.jsp.ListTag. In the further text, please do not mix HTML
SELECT and SQL SELECT. The former is described in
http://www.w3.org/TR/html401/interact/forms.html#h-17.6. This tag uses
the following attributes:

  - Database related attributes:

    - table. The name of the basic table (or corresponding Cache
      Class) in which rows (instances) we are interested.

    - property. Values of that property will be displayed in the
      drop-down or multiple selection list. If any values are selected
      before form submission, then they will be used in generated SQL
      query.

    - useHistory. Boolean attribute. If its value is false, then all
      queries are performed against the whole table. If it is true,
      then the results of prior searches are used in queries.

  - HTML related attributes (see
    http://www.w3.org/TR/html401/interact/forms.html#h-17.6):


    - size. Value is used as a value for SELECT size element.

    - multiple. Value is used as a value for SELECT multiple
      element. If it is true, then multiple-selection list is
      created. If it is false, then drop-down list is created.

    - id. Value is used as a value for SELECT id element.

    - title. Value is used as a value for SELECT title element.

    - name. Value is used as a value for SELECT name element. This is
      important element because it is used in the generated HTTP
      request and corresponding SQL request. If the attribute is not
      defined, then name is equal to the value of property
      attribute. If you need to create more than one HTML SELECT
      element for the same property, you can use XName notation. It is
      described in documentation to com.intersys.jsp.PushViewTag
      class.

  - Additional attributes:

    - none. Boolean attribute. If the value is true, then element
      "none" is added to the list. Selecting it produces no SQL
      request. Default is "true".

    - forceselection. Boolean attribute. If the value is true, at
      least one element in the list will be selected. If there is no
      way to determine which one to select, the first one is
      selected. Default is "false".

    - maxitems. Numeric attribute. Defines the maximum number of rows
      to put in HTML SELECT element.

Only values that corresponds to property values of elements in the
table or current view (in case of useHistory is true) are used. The
range of values is obtained by the following SQL query:

  SELECT DISTINCT <Property> FROM <Table or View Name> ORDER BY <Property>

For example, for the tag:

			<cache:list table="Sample.Person" property="Home_City" size = "10"
			  useHistory = "true" multiple = "true">
			</cache:list>

The following HTML will be produced:

  <select multiple  size =" 10"  name =" Sample.Person.Home_City" >

    <option value =" Albany">Albany</option>
    <option value =" Bensonhurst">Bensonhurst</option>
    <option value =" Boston">Boston</option>
    <option value =" Cambridge">Cambridge</option>
    ....
  </select>

Values of options are obtained from the following SQL query:

  SELECT DISTINCT Home_City FROM Sample.Person ORDER BY Home_City

Selecting the first 2 options and submitting the form will produce the
following SQL query:

  CREATE VIEW Sample.Person_0555A4D730_1 AS 
    SELECT Sample.Person.* FROM Sample.Person 
    WHERE (Sample.Person.Home_City = 'Albany' 
            OR 
           Sample.Person.Home_City = 'Bensonhurst' )

After this query, if value of useHistory was true, then option values for tag:

			<cache:list table="Sample.Person" property="Office_City" size = "10"
			  useHistory = "true" multiple = "true">
			</cache:list>

will be obtained from the following SQL query:

  SELECT DISTINCT Office_City FROM Sample.Person_0555A4D730_1 ORDER BY Office_City

Note, that current view name (Sample.Person_0555A4D730_1) is used
instead of table name (Sample.Person). Thus only value available for
the elements found after previous search will be displayed for new
search.

If property is an object property, then the value attribute of option
and its content will be different. Suppose we have a table of vacation
itineraries that utilize hotels, that are also stored in table
Hotel. Then the tag:

    <cache:list table="User.Itinerary" property="Hotel" size = "10"
     useHistory = "true" multiple = "true" none = "false"/>

will produce the following HTML:

   <select multiple  size =" 10"  name =" Travelsmart.Itinerary.Hotel" >
     <option value =" 209">ADAMS BEACH</option>
     <option value =" 177">ADONIA BEACH</option>
     <option value =" 206">AENEAS HB</option>
     <option value =" 245">ALEXANDER THE GREAT</option>
     ...
   </select>

The value attribute in option "ADAMS BEACH" is the id of corresponding
element in its table. Corresponding values were obtained by the
following SQL query:

   SELECT DISTINCT Hotel, User.Hotel.Name 
    FROM User.Itinerary, User.Hotel 
    WHERE Hotel=User.Hotel.ID ORDER BY User.Hotel.DisplayName

The first column of the produced Result Set is used for value
attribute of option and the second is used for its content.

The id, not the name will be used in in SQL query if the first
2 elements of this list were selected:

   CREATE VIEW User.Itinerary_D87A0A4230_1 AS 
    SELECT User.Itinerary.* FROM User.Itinerary 
    WHERE (User.Itinerary.Hotel = '209' OR User.Itinerary.Hotel = '177' )

==============================================================================
Related documentation:

Servlets:

http://developer.java.sun.com/developer/onlineTraining/Servlets/Fundamentals/
http://java.sun.com/products/servlet/2.2/javadoc/overview-summary.html
http://java.sun.com/products/servlet/download.html

Servlets/JSP:

http://www.apl.jhu.edu/~hall/java/Servlet-Tutorial/

JSP:

http://www.apl.jhu.edu/~hall/java/Servlet-Tutorial/Servlet-Tutorial-JSP.html
http://java.sun.com/products/jsp/download.html#specs

==============================================================================
Related files:

cache.tld (WEB-INF/cache.tld).

