<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="18" zv="Cache for Windows (Intel) 5.1 (Build 775U)" ts="2005-09-30 14:03:14">
<Class name="MyPackage.Contact">
<Super>%Persistent,%Populate,%XML.Adaptor</Super>
<TimeCreated>60171,59140.958255</TimeCreated>

<Property name="ContactType">
<Description>
Describes the nature of the contact: Personal or Business</Description>
<Type>%String</Type>
<Parameter name="TRUNCATE" value="1"/>
<Parameter name="VALUELIST" value=",Business,Personal"/>
</Property>

<Property name="Name">
<Description>
Represents a contact's name</Description>
<Type>%String</Type>
<Required>1</Required>
<Parameter name="POPSPEC" value="Name()"/>
<Parameter name="TRUNCATE" value="1"/>
</Property>

<Query name="ByContactType">
<Type>%SQLQuery</Type>
<FormalSpec>type:%String</FormalSpec>
<SqlQuery>SELECT %ID FROM Contact
 WHERE (ContactType = :type)
 ORDER BY Name</SqlQuery>
<Parameter name="CONTAINID" value="1"/>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^MyPackage.ContactD</DataLocation>
<DefaultData>ContactDefaultData</DefaultData>
<IdLocation>^MyPackage.ContactD</IdLocation>
<IndexLocation>^MyPackage.ContactI</IndexLocation>
<StreamLocation>^MyPackage.ContactS</StreamLocation>
<Data name="ContactDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ContactType</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
</Data>
<Property name="ContactType">
</Property>
<Property name="Name">
</Property>
</Storage>
</Class>


<Class name="MyPackage.TestMe">
<Super>%RegisteredObject</Super>
<TimeCreated>60171,38292.065582</TimeCreated>

<Method name="Add">
<ClassMethod>1</ClassMethod>
<FormalSpec>arg1:%Integer,arg2:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[

	quit arg1 + arg2
]]></Implementation>
</Method>

<Method name="CreateContact">
<ClassMethod>1</ClassMethod>
<FormalSpec>name:%String,type:%String</FormalSpec>
<ReturnType>MyPackage.Contact</ReturnType>
<Implementation><![CDATA[
	Set contact = ##class(MyPackage.Contact).%New()
	Set contact.Name=name
	Set contact.ContactType=type
	Quit contact
]]></Implementation>
</Method>

<Method name="GetContactsByType">
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String</FormalSpec>
<ReturnType>%ListOfObjects</ReturnType>
<Implementation><![CDATA[
	
	Set list=##class(%Library.ResultSet).%New()
]]></Implementation>
</Method>
</Class>


<Class name="MyPackage.Tests">
<Super>%UnitTest.TestCase</Super>
<TimeCreated>60171,38780.673553</TimeCreated>

<Method name="TestAdd">
<Implementation><![CDATA[
		do $$$AssertEquals(##class(MyPackage.TestMe).Add(2,2),4, "Test Add(2,2)=4")
		do $$$AssertNotEquals(##class(MyPackage.TestMe).Add(2,2),5,"Test Add(2,2)'=5")
]]></Implementation>
</Method>

<Method name="TestCreateContact">
<Implementation><![CDATA[
	Set name="Smith,John"
	Set type="Business"
	
	Set contact=##class(MyPackage.TestMe).CreateContact(name,type)
	
	Do $$$AssertEquals(contact.Name, name, "Name Assignment")
	Do $$$AssertEquals(contact.ContactType, type, "ContactType Assignment")
	
	Do $$$AssertStatusOK(contact.%Save(),"Saving the Contact")
]]></Implementation>
</Method>

<Method name="TestEditContact">
<Implementation><![CDATA[
	set contact=##class(MyPackage.Contact).%OpenId(1)
	set contact.Name="Rockwell,Norman"
	set contact.ContactType="Friend"
	Do $$$AssertStatusNotOK(contact.%Save(),"ContactType = Friend")
	Set contact.ContactType="Personal"
	Do $$$AssertStatusOK(contact.%Save(),"ContactType = Personal")
]]></Implementation>
</Method>

<Method name="OnBeforeOneTest">
<FormalSpec>testname:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	For i=1:1:5
	{
	 set contact=##class(MyPackage.Contact).%New()
	 
	 if (i#2=0)
	 {
		set contact.Name="NameP"
		set contact.ContactType="Personal"
		do contact.%Save()
		set contact=""	 
	 }	
	 
	 else
	 {
		 set contact.Name="NameB"
		 set contact.ContactType="Business"
		 do contact.%Save()
		 set contact=""
		 
	 }
		
	}
		
 	Quit $$$OK
]]></Implementation>
</Method>

<Method name="TestQuery">
<Implementation><![CDATA[
	Set type="Personal"
	Set rs=##class(%Library.ResultSet).%New("MyPackage.Contact:ByContactType")
	
	Do rs.Execute(type)
	
	set i=0
	While (rs.Next()){
		
		set i=i+1
		set contact=##class(MyPackage.Contact).%OpenId(rs.Data("ID"))
		Do $$$AssertEquals(contact.ContactType, type, "Contact has correct type")
	}
	
	Do $$$AssertEquals(2,i,"RS has correct number of results")
]]></Implementation>
</Method>

<Method name="OnAfterOneTest">
<FormalSpec>testname:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Do ##class(MyPackage.Contact).%KillExtent()
 	Quit $$$OK
]]></Implementation>
</Method>
</Class>
</Export>
